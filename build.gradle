plugins {
    id 'java'
    id 'org.springframework.boot' version '2.5.1'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
}

version = '0.0.1-SNAPSHOT'
group = 'com.doroshenko.serhey'

springBoot { buildInfo() }

java { toolchain { languageVersion.set(JavaLanguageVersion.of(16)) } }

bootJar { manifest { attributes("Implementation-Title": project.name, "Implementation-Version": project.version) } }

ext {
    set('openApiVersion', '1.5.9')
    set('springCloudVersion', "2020.0.3")
    set('testcontainersVersion', "1.15.3")
    set('mapStructVersion', '1.4.2.Final')
    set('hibernateTypesVersion', "2.11.1")
    set("dockerImageProfile", project.findProperty("dip") ?: 'default')
    gitHubCredeintials = {
        username = project.findProperty('gitHubUsername') ?: System.getenv('GIT_HUB_USR')
        password = project.findProperty('gitHubPassword') ?: System.getenv('GIT_HUB_PSW')
    }
}

configurations { compileOnly { extendsFrom annotationProcessor } }

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven {
        credentials(gitHubCredeintials)
        url "https://maven.pkg.github.com/spring-cloud-portfolio/person-api"
    }
}

dependencies {
    /* Custom */
    implementation 'com.doroshenko.serhey:person-api:+'
    /*MapStruct*/
    implementation("org.mapstruct:mapstruct:${mapStructVersion}")
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapStructVersion}"
    testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapStructVersion}"
    /* Web */
    implementation 'org.springframework.boot:spring-boot-starter-web'
    /* Cloud */
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    /* Security */
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    /* Persistence */
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'org.flywaydb:flyway-core'
    annotationProcessor 'org.hibernate:hibernate-jpamodelgen'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation "com.vladmihalcea:hibernate-types-52:${hibernateTypesVersion}"
    /* Cache */
    implementation('com.github.ben-manes.caffeine:caffeine')
    /* Documentation */
    implementation("org.springdoc:springdoc-openapi-ui:${openApiVersion}")
    implementation("org.springdoc:springdoc-openapi-common:${openApiVersion}")
    implementation("org.springdoc:springdoc-openapi-security:${openApiVersion}")
    /* Spring tools */
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    /* Test */
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
}

dependencyManagement {
    imports {
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

test {
    useJUnitPlatform()
}

bootBuildImage {
    publish = true
    cleanCache = false
    environment = ["BP_JVM_VERSION": "16.*"]
    imageName = "cloudportfolio/${project.name}-${dockerImageProfile}"
    docker {
        publishRegistry {
            username = project.findProperty('dockerHubUsername') ?: System.getenv('DOCKER_HUB_USR')
            password = project.findProperty('dockerHubPassword') ?: System.getenv('DOCKER_HUB_PSW')
        }
    }
}
